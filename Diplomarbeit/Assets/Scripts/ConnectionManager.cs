//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using HTTP;
using System.Text;
using System.Linq;
using AssemblyCSharp;
using System.IO;
using System.Collections;
using System.Collections.Generic;
namespace AssemblyCSharp
{
	public class ConnectionManager
	{
		private static ConnectionManager _instance;
		private ConnectionManager()
		{
			this.baseUrl = "http://140.78.92.61:5984/";
		}
		public static ConnectionManager instance
		{
			get
			{
				if(_instance == null)
				{
					_instance = new ConnectionManager();
				}
				return _instance;
			}
		}

		public string baseUrl {
			get;
			set;
		}
		

		public Player GetPlayerDataForId(string id) {
			try{
				
				HTTP.Request request = new HTTP.Request ("get", this.baseUrl + "players/"+id);
				request.Send ();
				while( !request.isDone )
				{
				}
				JSONObject playerJSON = new JSONObject( request.response.Text );
				List<JSONObject> json = playerJSON.list;
				if(!(json[0].str == "not_found" && json[1].str == "missing"))
				{
					Player player = new Player();
					player.Id = json[0].str;
					player.Revision = json[1].str;
					player.Name = json[2].str;
					player.Coins = (int)json[3].n;
					player.Highscore = (int)json[4].n;
					player.Matches = new List<Match>();
					player.Powerups = new List<Powerup>();
					
					return player;
				}
				else
				{
					UpdatePlayerData(new Player()
					{
						Id = id,
						Revision = null,
						Name = "",
						Coins = 0,
						Highscore = 0,
						Powerups = new List<Powerup>()
					});
					return GetPlayerDataForId(id);
				}

			}
			catch(Exception e)
			{

			}


			
			return null;
		}

		public void UpdatePlayerData(Player player)
		{
			try{
				string jsonString;
				if(player.Revision != null)
					jsonString ="{\"_id\":\""+player.Id+"\",\"_rev\":\""+player.Revision+"\",\"Name\":\""+player.Name+"\",\"Coins\":"+player.Coins+",\"Highscore\":"+player.Highscore+"}";
				else
					jsonString ="{\"Name\":\""+player.Name+"\",\"Coins\":"+player.Coins+",\"Highscore\":"+player.Highscore+"}";

				HTTP.Request request = new HTTP.Request ("put", this.baseUrl + "players/"+player.Id,new MemoryStream(Encoding.UTF8.GetBytes(jsonString)));
				request.synchronous = true;
				request.Send ((requestObject) => {
					JSONObject playerJSON = new JSONObject( requestObject.response.Text );
					List<JSONObject> json = playerJSON.list;
					player.Revision = json[2].str;
				});
				while( !request.isDone )
				{
				}
			}
			catch(Exception e)
			{
			}
		}

		public List<Match> GetMatchesForPlayerId(string id)
		{
			List<Match> result = GetMatchesForPlayerIdAndViewName (id, "challenged");
			result.AddRange(GetMatchesForPlayerIdAndViewName(id,"challenger"));
			List<Match> temp = new List<Match>(result.Where (x => x.Winner != "none"));
			result.RemoveAll (x => x.Winner != "none");
			result.AddRange (temp);
			return result;
		}

		private List<Match> GetMatchesForPlayerIdAndViewName(string id, string viewname)
		{
			try{
				HTTP.Request request = new HTTP.Request ("get", this.baseUrl + ("matches/_design/"+viewname+"/_view/matches?key=\""+id+"\""));
				request.Send ();
				while( !request.isDone )
				{
				}
				JSONObject matchesJson = new JSONObject( request.response.Text );
				List<JSONObject> json = matchesJson.list;
				if(!(json[0].str == "not_found" && json[1].str == "missing"))
				{
					List<Match> result = new List<Match>();
					List<JSONObject> matchList = json[2].list;
					foreach(JSONObject j in matchList)
					{
						if(j != null)
						{
							Match match = new Match();
							match.Id = j.list[2].list[0].str;
							match.Revision = j.list[2].list[1].str;
							match.ChallengerId = j.list[2].list[2].str;
							match.ChallengedId = j.list[2].list[3].str;
							match.ChallengerScore = (int)j.list[2].list[4].n;
							match.ChallengedScore = (int)j.list[2].list[5].n;
							match.Winner = j.list[2].list[6].str;
							match.Seed = (int)j.list[2].list[7].n;
							result.Add(match);
						}
					}
					return result;
				}
			}
			catch(Exception e)
			{
			}
			return new List<Match>();

		}

		public Match GetMatchForId(string id)
		{
			try{
				HTTP.Request request = new HTTP.Request ("get", this.baseUrl + ("matches/"+id));
				request.Send ();
				while( !request.isDone )
				{
				}
				JSONObject matchesJson = new JSONObject( request.response.Text );
				List<JSONObject> json = matchesJson.list;
				if(!(json[0].str == "not_found" && json[1].str == "missing"))
				{
					Match match = new Match();
					match.Id = json[0].str;
					match.Revision = json[1].str;
					match.ChallengerId = json[2].str;
					match.ChallengedId = json[3].str;
					match.ChallengerScore = (int)json[4].n;
					match.ChallengedScore = (int)json[5].n;
					match.Winner = json[6].str;
					match.Seed = (int)json[7].n;
					
					return match;
				}
			}
			catch(Exception e)
			{
			}
			return null;
		}
	}
}

